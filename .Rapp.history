?cycle
?tapply
?cycle
?tapply
str(presidents)
summary(presidents)
presidents
cycle(presidents)
tapply(presidents, presidents$Qtr1, presidents$Qtr2, presidents$Qtr3, presidents$Qtr4, cycle)
tapply(presidents, cycle(presidents), mean, na.rm=T)
?cut
airquality$Wind
cut(airquality$Wind, 10)
tapply(cut(airquality$Wind, 10), airquality$Solar.R, mean)
tapply(cut(airquality$Wind, 10), airquality$Solar.R, mean, na.rm=T)
tapply(airquality$Solar.R, cut(airquality$Wind, 10), mean, na.rm=T)
tapply(airquality$Solar.R, cut(airquality$Wind, 3), mean, na.rm=T)
tapply(airquality$Solar.R, cut(airquality$Wind, breaks=2*(1:11)-1), mean, na.rm=T)
?sapply
?with
?prop.table
Count=c(81,6,192,71,234,36,55,25))
my.data<-data.frame(Treatment=c(rep("A",4),rep("B",4)), Stone=rep(rep(c("Small","Large"),c(2,2)),2),Success=rep(c(1,0),4),Count=c(81,6,192,71,234,36,55,25))
my.data
?xtabs
?prop.table
?xtabs
my.table<-xtabs(Count~Treatment+Success+Stone,data=my.data) - correct
my.table<-xtabs(Count~Treatment+Success+Stone,data=my.data)
my.table
?prop.table
?margin.table
margin.table(prop.table(my.table, 1:2),2)
margin.table(prop.table(my.table, 1:2),1)
margin.table(prop.table(my.table, 1:2),2)
prop.table(margin.table(my.table, 1:2),1)
prop.table(margin.table(my.table, 1:2),2)
margin.table(prop.table(my.table, 1:2),2)
margin.table(prop.table(my.table, 1:2),1)
margin.table(prop.table(my.table, 1:2),2)
prop.table(margin.table(my.table, 1:2),1) - correct
prop.table(margin.table(my.table, 1:2),1)
my.table
prop.table(my.table[,,2],2)
prop.table(my.table[,,2],1)
prop.table(my.table[,,1],2)
my.table
prop.table(my.table[,,1],2)
prop.table(my.table[,,1],1)
my.table
prop.table(my.table[1,,],1)
prop.table(my.table[1,,],2)
my.table[1,,]
prop.table(my.table[1,,],2)
?prop.table
prop.table(my.table[2,,],2)
my.table
margin.table(my.table, c(1,3))
?par
?mforw
?mfrow
??mfrow
rnorm(5, mean=2,sd=1)
?curve
?par
?plot
par(mfrow = c(2, 2),lwd=3,col="red")
plot(rnorm(25, min=1,max=25))
plot(rnorm(25, mean=2,sd=1))
par(mfrow = c(2, 2),lwd=3,col="red")
par(mfrow = c(3, 3),lwd=3,col="red")
?curve
curve(rnorm(25, mean=2,sd=1), 1,25)
par(mfrow = c(3, 3),lwd=3,col="red")
c<-rnorm(25, mean=2,sd=1)*9
c
c[3,3]
a[3,3]
a<-[3,3]
a<-c(3,3)
a
a<-v(3,3)
a<-c(3,3)
x<-rnorm(1000)
plot(density(x), xlim=c(-8,16))
y<-rnorm(1000,mean=8)
lines(density(y),col=blue)
x<-rnorm(1000)
plot(density(x), xlim=c(-8,16))
y<-rnorm(1000,mean=8)
lines(density(y),col="blue")
generate <- function() {#
	return rnorm(25,mean=25,sd=1)#
}
generate <- function() {#
	rnorm(25,mean=25,sd=1)#
}
generate()
mydata <- replicate(9, generate())
mydata
par(mydata,mfrow = c(3, 3),lwd=3,col="red")
par(mydata,mfrow = c(3, 3),lwd=3)
plot(mydata)
curve(density(mydata))
?curve
plot(rnorm(25, mean=2,sd=1))
my.ozone<-airquality$Ozone[!is.na(airquality$Ozone) & airquality$Ozone>1]
mean.1<-mean(my.zone)
mean.1<-mean(my.ozone)
sd.1<-sd(my.ozone)
mean.1<-mean(my.ozone)
sd.1<-sd(my.ozone)
mean.1
sd.1
str(my.ozone)
summary(my.ozone)
count(my.ozone)
str(my.ozone)
my.ozone.length
length(my.ozone)
??qqplot
?qqplot
qqplot(my.ozone, rnorm(115,mean=42.48696,sd=32.9056))
?lines
lines(col.main="blue")
lines(x,col.main="blue")
lines(my.ozone,col="blue")
lines(rnorm(115,mean=42.48696,sd=32.9056,col="green")
rm<-rnorm(115,mean=42.48696,sd=32.9056)
qqplot(my.ozone, rm)
lines(my.ozone,col="blue")
lines(rm,col="green")
qqplot(my.ozone, rm)
lines(0:200,0:200,type="l",lwd=3,col="Red")
mean.2<-mean(log(my.ozone))
sd.2<-sd(log(my.ozone))
qqplot(my.ozone,rm2)
rm2<-rnorm(115,mean=mean.2,sd=sd.2)
qqplot(my.ozone,rm2)
lines(0:200,0:200,type="l",lwd=3,col="Red")
qqplot(my.ozone,exp(rm2))
lines(0:200,0:200,type="l",lwd=3,col="Red")
?prod
?sample
doone<- function() {#
	x <-sum(sample(1:6),replace=T)#
	y<-sample(1:6,x,replace=T)#
	y#
}
set.seed(457778)
yvalues<-replicate(1000,done())
yvalues<-replicate(1000,doone())
hist(yvalues)
doone<- function() {#
	x <-sum(sample(1:6),2,replace=T)#
	y<-sample(1:6,x,replace=T)#
	y#
}
set.seed(457778)
yvalues<-replicate(1000,doone())
hist(yvalues)
doone<- function() {#
	x <-sum(sample(1:6,2,replace=T))#
	y<-sum(sample(1:6,x,replace=T))#
	y#
}
set.seed(457778)
yvalues<-replicate(1000,doone())
hist(yvalues)
my.data <- read.csv('data/Lab10.csv')
my.data
data1<-my.data$systolic.bp[my.data$Genotype=="BA"]
data2<-my.data$systolic.bp[my.data$Genotype=="BB"]
testResult <- t.test(data1,data2)
testResult
plot(density(data1))
plot(density(data1))
lines(density(data2),col="blue")
my.new.data<-my.data
my.new.data$Genotype<-"BB"
index.temp<-sample(1:50,n1)
my.new.data
n1<-length(data1)
n1
my.new.data<-my.data
my.new.data$Genotype<-"BB"
index.temp<-sample(1:50,n1)
my.new.data$Genotype[index.temp]<-"BA"
new.data1<-my.new.data$systolic.bp[my.new.data$Genotype=="BA"]
new.data2<-my.new.data$systolic.bp[my.new.data$Genotype=="BB"]
t.test(new.data1,new.data2)$statistic
index.temp<-sample(1:50,n1)
seed(1234)
set.seed(1234)
my.new.data<-my.data
my.new.data$Genotype<-"BB"
index.temp<-sample(1:50,n1)
my.new.data$Genotype[index.temp]<-"BA"
new.data1<-my.new.data$systolic.bp[my.new.data$Genotype=="BA"]
new.data2<-my.new.data$systolic.bp[my.new.data$Genotype=="BB"]
t.test(new.data1,new.data2)$statistic
.test
t.test
function sim() {#
my.new.data<-my.data#
my.new.data$Genotype<-"BB"#
index.temp<-sample(1:50,n1)  #
my.new.data$Genotype[index.temp]<-"BA"#
new.data1<-my.new.data$systolic.bp[my.new.data$Genotype=="BA"]#
new.data2<-my.new.data$systolic.bp[my.new.data$Genotype=="BB"]#
return t.test(new.data1,new.data2)$statistic#
}
sim  <- function() {#
my.new.data<-my.data#
my.new.data$Genotype<-"BB"#
index.temp<-sample(1:50,n1)  #
my.new.data$Genotype[index.temp]<-"BA"#
new.data1<-my.new.data$systolic.bp[my.new.data$Genotype=="BA"]#
new.data2<-my.new.data$systolic.bp[my.new.data$Genotype=="BB"]#
return t.test(new.data1,new.data2)$statistic#
}
sim  <- function() {#
my.new.data<-my.data#
my.new.data$Genotype<-"BB"#
index.temp<-sample(1:50,n1)  #
my.new.data$Genotype[index.temp]<-"BA"#
new.data1<-my.new.data$systolic.bp[my.new.data$Genotype=="BA"]#
new.data2<-my.new.data$systolic.bp[my.new.data$Genotype=="BB"]#
t.test(new.data1,new.data2)$statistic#
}
my.t.values <- replicate(10000,sim())
my.t.values
set.seed(554)
my.t.values <- replicate(10000,sim())
my.t.values
sim  <- function() {#
my.new.data<-my.data#
my.new.data$Genotype<-"BB"#
index.temp<-sample(1:50,n1)  #
my.new.data$Genotype[index.temp]<-"BA"#
new.data1<-my.new.data$systolic.bp[my.new.data$Genotype=="BA"]#
new.data2<-my.new.data$systolic.bp[my.new.data$Genotype=="BB"]#
t.test(new.data1,new.data2)$p#
}
my.t.values <- replicate(10000,sim())
my.t.values
sim  <- function() {#
my.new.data<-my.data#
my.new.data$Genotype<-"BB"#
index.temp<-sample(1:50,n1)  #
my.new.data$Genotype[index.temp]<-"BA"#
new.data1<-my.new.data$systolic.bp[my.new.data$Genotype=="BA"]#
new.data2<-my.new.data$systolic.bp[my.new.data$Genotype=="BB"]#
t.test(new.data1,new.data2)$statistic#
}
my.t.values <- replicate(10000,sim())
my.t.values
tail(my.t.values)
set.seed(554)
my.t.values <- replicate(10000,sim())
tail(my.t.values)
airquality
lmobj<-lm(log(ozone) ~ radiation, wind, temperature,  ozone =1)
str(airquality)
lmobj<-lm(log(ozone) ~ Solar.R, Wind, Temp,  Ozone =1)
lmobj<-lm(log(ozone) ~ Solar.R + Wind +Temp,  Ozone =1)
lmobj<-lm(log(Ozone) ~ Solar.R + Wind +Temp,  Ozone =1)
?subset
lmobj<-lm(log(Ozone) ~ Solar.R + Wind +Temp,  data=subset(airquality, Ozone = 1)
lmobj<-lm(log(Ozone) ~ Solar.R + Wind +Temp,  data=subset(airquality, Ozone = 1))
lmobj<-lm(log(Ozone) ~ Solar.R + Wind +Temp,  data=subset(airquality, Ozone = 1))
lmobj
summary(lmobj)
plot(qqnorm(lmobj))
qqnorm(lmobj$res)
sd.1<-sd(lmobj$res)
summary(lmobj)
lmobj$coefficients
names(lmobj$coefficients)
lmobj$Wind
names(lmobj)
names(lmobj)
?drop1
lmobj1<-lm(log(Ozone) ~ Solar.R + Wind +Temp,  drop1(newdata, Solar.R))
newdata<-subset(airquality, Ozone = 1)
lmobj1<-lm(log(Ozone) ~ Solar.R + Wind +Temp,  drop1(newdata, Solar.R))
?drop1
lmobj<-lm(log(Ozone) ~ Solar.R + Wind +Temp,  data=subset(airquality, Ozone = 1))
drop1(lmobj, Solar.R)
drop1(lmobj, Wind + Temp)
summary(father.son)
load(UsingR)
install.package(UsingR)
install.package("UsingR")
?install.package
???install.package
??install.package
install.packages(UsingR)
install.packages("UsingR")
load(UsingR)
load("UsingR")
summary(father.son)
Sys.setlocale("LC_ALL","English")
Sys.setlocale("LC_ALL","English")
load("UsingR")
install.packages("UsingR")
